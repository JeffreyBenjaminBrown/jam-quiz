module IntervalScores where

import qualified Data.List as L
import           Data.Map (Map)
import qualified Data.Map as M

import Util


scaleScore41 = scaleScore 41 intervalDissonance_41edo

scaleScore :: Edo
  -> Map Int Float -- ^ dissonance function, e.g. @intervalDissonance_41edo@
  -> [Int] -- ^ scale to score
  -> Float -- ^ Score. Higher = worse.
scaleScore edo m scale =
  sum (map score intervals)
  / fromIntegral (length scale) -- Helpful if comparing scales of different lengths. Otherwise wasteful.
  where
    intervals :: [Int]
    intervals = concatMap normalize $ L.tails scale
      where
        normalize :: [Int] -> [Int]
        normalize [] = []
        normalize as@(a:_) = map (+ (-a)) as
    score :: Int -> Float
    score i = min -- the two cases make it immune to interval inversion
              (maybe e id $ M.lookup i m)
              (maybe e id $ M.lookup (edo - i) m)
      where e = error "IntervalScores.scaleScore: bad lookup"

-- | It would be cooler to load this from a csv file,
-- or much cooler yet to merge this code and Montevideo,
-- but it's easier for me to just encode this table as source here.
-- It was generated by running
-- MTV> myPrint $ M.toList $ intervalDissonances 41
-- in Montevideo:
--   git@github.com:JeffreyBenjaminBrown/montevideo
-- as of commit
--   0cf7e819820579ae541a843b96c62573e5a303c6
intervalDissonance_41edo :: Map Int Float
intervalDissonance_41edo = M.fromList
  $ (0, 0) :
  [ (1,7.6606817)
  , (2,7.6606817)
  , (3,7.6606817)
  , (4,5.6471076)
  , (5,5.482802)
  , (6,5.54981)
  , (7,4.4266663)
  , (8,4.4753513)
  , (9,4.1876698)
  , (10,5.4128447)
  , (11,4.3011975)
  , (12,5.19512)
  , (13,3.8957324)
  , (14,6.236953)
  , (15,4.7431345)
  , (16,6.967535)
  , (17,2.4849067)
  , (18,6.6059456)
  , (19,5.227337)
  , (20,4.005348)
  , (21,4.698495)
  , (22,5.8121743)
  , (23,7.299093)
  , (24,1.7917595)
  , (25,7.6606817)
  , (26,5.4362817)
  , (27,5.543805)
  , (28,4.5888796)
  , (29,5.844391)
  , (30,3.6080503)
  , (31,6.105992)
  , (32,4.8808165)
  , (33,3.7822046)
  , (34,5.1198134)
  , (35,4.8566628)
  , (36,4.7896547)
  , (37,5.537492)
  , (38,7.6606817)
  , (39,7.6606817)
  , (40,7.6606817)
  , (41,0)
  ]
