module IntervalScores where

import qualified Data.List as L
import           Data.Map (Map)
import qualified Data.Map as M

import Util


scaleScore41 = scaleScore 41 intervalDissonance_41edo

scaleScore :: Edo
  -> Map Int Float -- ^ dissonance function, e.g. @intervalDissonance_41edo@
  -> [Int] -- ^ scale to score
  -> Float -- ^ Score. Higher = worse.
scaleScore edo m scale =
  sum (map score intervals)
  / fromIntegral (length scale) -- Helpful if comparing scales of different lengths. Otherwise wasteful.
  where
    intervals :: [Int]
    intervals = concatMap normalize $ L.tails scale
      where
        normalize :: [Int] -> [Int]
        normalize [] = []
        normalize as@(a:_) = map (+ (-a)) as
    score :: Int -> Float
    score i = min -- the two cases make it immune to interval inversion
              (maybe e id $ M.lookup i m)
              (maybe e id $ M.lookup (edo - i) m)
      where e = error "IntervalScores.scaleScore: bad lookup"

-- | It would be cooler to load this from a csv file,
-- or much cooler yet to merge this code and Montevideo,
-- but it's easier for me to just encode this table as source here.
-- It was generated by running
-- MTV> myPrint $ M.toList $ intervalDissonances 41
-- in Montevideo:
--   git@github.com:JeffreyBenjaminBrown/montevideo
-- as of commit
--   5f2945af5a71721b3b688ff5577a81f1b26372c1
intervalDissonance_41edo :: Map Int Float
intervalDissonance_41edo = M.fromList
  $ (0, 0) :
  [ (1,9.760682)
  , (2,9.760682)
  , (3,9.760682)
  , (4,5.9471073)
  , (5,6.082802)
  , (6,6.5998096)
  , (7,4.5766664)
  , (8,4.9253516)
  , (9,4.6376696)
  , (10,5.862845)
  , (11,5.2011976)
  , (12,5.7951202)
  , (13,4.7957325)
  , (14,7.4369526)
  , (15,5.343135)
  , (16,9.067535)
  , (17,2.4849067)
  , (18,8.105946)
  , (19,5.977337)
  , (20,4.455348)
  , (21,5.148495)
  , (22,6.670484)
  , (23,8.799093)
  , (24,1.7917595)
  , (25,9.760682)
  , (26,6.0362816)
  , (27,6.7438054)
  , (28,5.4888797)
  , (29,6.488267)
  , (30,4.5080504)
  , (31,6.555992)
  , (32,5.3308167)
  , (33,4.2322044)
  , (34,5.2698135)
  , (35,5.906663)
  , (36,5.389655)
  , (37,6.287492)
  , (38,9.760682)
  , (39,9.760682)
  , (40,9.760682)
  , (41,9.760682)
  ]
